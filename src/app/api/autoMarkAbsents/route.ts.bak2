// filepath: c:\Users\Edbert\attendify\src\app\api\autoMarkAbsents\route.ts
import { NextResponse } from 'next/server';
import admin, { getFirestoreAdmin } from '@/lib/firebase-admin';

// Get a Firestore instance using our custom initialization function
const db = getFirestoreAdmin();

export async function GET(request: Request) {
  // Check if db was successfully initialized
  if (!db) {
    console.error("[API autoMarkAbsents] CRITICAL: Firestore DB is not initialized. This likely means Firebase Admin SDK setup failed. Please check server logs for earlier initialization errors and verify all Firebase-related environment variables in .env.local are correct.");
    return NextResponse.json({ error: 'Server configuration error: Firebase services not available.' }, { status: 500 });
  }

  // 1. Secure your endpoint: Check for a secret key from the cron job
  const authHeader = request.headers.get('authorization');
  if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
    console.warn('[API autoMarkAbsents] Unauthorized attempt');
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  console.log('[API autoMarkAbsents] Request authorized, starting process.');

  // 2. Implement your logic (similar to your current Firebase Function)
  try {
    const now = new Date();
    const todayStr = now.toISOString().slice(0, 10); // YYYY-MM-DD
    const daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    const todayDay = daysOfWeek[now.getDay()];
    console.log(`[API autoMarkAbsents] Running at ${now.toISOString()} (${todayDay})`);

    const classroomsSnap = await db
      .collection("classrooms")
      .where("archived", "==", false)
      .get();
    
    let markedAbsentCount = 0;
    let markedLateCount = 0;
    let checkedSessionsCount = 0;

    for (const classroomDoc of classroomsSnap.docs) {
      const classroom = classroomDoc.data();
      const classCode = classroomDoc.id;
      // Ensure sessions is an array, default to empty if not or undefined
      const sessions = Array.isArray(classroom.sessions) ? classroom.sessions : [];
      
      if (!sessions.length) {
        console.log(`[API autoMarkAbsents] Class ${classCode} has no sessions defined. Skipping.`);
        continue;
      }

      for (const session of sessions) {
        // Validate session structure
        if (!session.day || !session.endTime) {
          console.warn(`[API autoMarkAbsents] Class ${classCode} has an invalid session object: ${JSON.stringify(session)}. Skipping.`);
          continue;
        }

        const sessionDay = session.day;
        const sessionEndTime = session.endTime; // "HH:mm"
        
        if (todayDay !== sessionDay) {
          continue; // Not the correct day for this session
        }
        checkedSessionsCount++;

        const [endHour, endMinute] = sessionEndTime.split(":").map(Number);
        const sessionEnd = new Date(now); // Use a copy of 'now' to avoid modifying it
        sessionEnd.setHours(endHour, endMinute, 0, 0); // Set to today's date with session's end time

        // Log the times for easier debugging
        console.log(`[API autoMarkAbsents] Current time (now): ${now.toISOString()}, Session end time for ${classCode} (${session.day} ${session.endTime}): ${sessionEnd.toISOString()}`);
        
        // Parse start time to handle late marking
        const [startHour, startMinute] = session.startTime ? session.startTime.split(":").map(Number) : [0, 0];
        const sessionStart = new Date(now);
        sessionStart.setHours(startHour, startMinute, 0, 0);
        
        // Calculate grace period end (15 minutes after start)
        const gracePeriodEnd = new Date(sessionStart.getTime() + 15 * 60 * 1000);
        
        // Calculate time differences
        const timeDiffFromEnd = now.getTime() - sessionEnd.getTime();
        const timeDiffFromGracePeriod = now.getTime() - gracePeriodEnd.getTime();
        const thirtyMinutesInMillis = 30 * 60 * 1000;

        console.log(`[API autoMarkAbsents] Time difference for ${classCode} session ${session.day} ${session.endTime}: ${timeDiffFromEnd / 60000} minutes since end, ${timeDiffFromGracePeriod / 60000} minutes since grace period.`);

        // Check if the session has ended today and within the last 30 minutes
        const isAfterClassEnded = now > sessionEnd && timeDiffFromEnd < thirtyMinutesInMillis && timeDiffFromEnd >= 0;
        
        // Check if we're after the grace period but before class end
        const isAfterGracePeriod = now > gracePeriodEnd && now <= sessionEnd;
        
        if (isAfterClassEnded || isAfterGracePeriod) {
          const processingType = isAfterClassEnded ? 'ABSENT' : 'LATE';
          console.log(`[API autoMarkAbsents] Processing class ${classCode} session ${sessionDay} ${sessionEndTime} for ${processingType} marking.`);
          
          const studentsSnap = await db.collection("students")
            .where("classCode", "==", classCode)
            .get();

          if (studentsSnap.empty) {
            console.log(`[API autoMarkAbsents] No students found for class ${classCode}.`);
            continue;
          }

          for (const studentDoc of studentsSnap.docs) {
            const student = studentDoc.data();
            const studentId = student.studentId;

            if (!studentId) {
                console.warn(`[API autoMarkAbsents] Student in class ${classCode} missing studentId. Doc ID: ${studentDoc.id}`);
                continue;
            }
            
            // Check if attendance exists for this session (today, for this subject if available)
            // Timestamp for query should be for the specific session's date (today)
            const sessionDateStart = new Date(todayStr + "T00:00:00.000Z");
            const sessionDateEnd = new Date(todayStr + "T23:59:59.999Z");

            let attendanceQuery = db.collection("attendance")
              .where("classCode", "==", classCode)
              .where("studentId", "==", studentId)
              .where("timestamp", ">=", sessionDateStart)
              .where("timestamp", "<=", sessionDateEnd);
              
            // If the session has a subject, include it in the query
            if (session.subject) {
              console.log(`[API autoMarkAbsents] Checking attendance for specific subject: ${session.subject}`);
              attendanceQuery = attendanceQuery.where("subject", "==", session.subject);
            } else {
              console.log(`[API autoMarkAbsents] No subject specified for this session. Checking any attendance for the day.`);
            }
            
            const attendanceSnap = await attendanceQuery.get();
            
            if (attendanceSnap.empty) {
              // If we're after class end, mark as absent
              if (isAfterClassEnded) {
                const subjectName = session.subject || null;
                console.log(`[API autoMarkAbsents] Marking absent: studentId=${studentId}, classCode=${classCode}, sessionDay=${sessionDay}, sessionEndTime=${sessionEndTime}, subject=${subjectName}`);
                const attendanceRecord = await db.collection("attendance").add({
                  classCode,
                  studentId,
                  studentName: student.fullName || "",
                  subject: subjectName, // Use the session's subject if available
                  timestamp: admin.firestore.Timestamp.fromDate(sessionEnd), // Timestamp of when the session ended
                  status: "absent",
                  proofImage: null,
                  excuse: null,
                  excuseFile: null,
                  submittedTime: admin.firestore.Timestamp.now(), // When this record was created
                  isLate: false,
                  geolocation: null,
                });
                markedAbsentCount++;
                
                // Create notification for auto-marked absence
                try {
                  // Get class name for the notification
                  const classData = classroomDoc.data();
                  const className = classData.name || classCode;
                  
                  // Create notification record
                  await db.collection("notifications").add({
                    userId: studentId,
                    title: "Marked as Absent",
                    message: `You have been marked as ABSENT in ${className} for ${sessionDay}.`,
                    type: "error",
                    read: false,
                    timestamp: admin.firestore.Timestamp.now(),
                    relatedDoc: {
                      type: "attendance",
                      id: attendanceRecord.id
                    },
                    extraData: {
                      classCode,
                      className,
                      date: sessionEnd.toLocaleDateString()
                    }
                  });
                  console.log(`[API autoMarkAbsents] Created absence notification for studentId=${studentId}, classCode=${classCode}`);
                } catch (notifError) {
                  console.error(`[API autoMarkAbsents] Error creating notification for studentId=${studentId}:`, notifError);
                  // Continue processing even if notification creation fails
                }
              }
              // If we're after grace period but before class end, mark as late 
              else if (isAfterGracePeriod) {
                const subjectName = session.subject || null;
                console.log(`[API autoMarkAbsents] Marking late: studentId=${studentId}, classCode=${classCode}, sessionDay=${sessionDay}, subject=${subjectName}`);
                const attendanceRecord = await db.collection("attendance").add({
                  classCode,
                  studentId,
                  studentName: student.fullName || "",
                  subject: subjectName, // Use the session's subject if available
                  timestamp: admin.firestore.Timestamp.now(), // Current time
                  status: "present", // Present but late
                  proofImage: null,
                  excuse: null,
                  excuseFile: null,
                  submittedTime: admin.firestore.Timestamp.now(),
                  isLate: true, // Mark as late
                  geolocation: null,
                });
                markedLateCount++; // Count late markings separately
                
                // Create notification for auto-marked late
                try {
                  const classData = classroomDoc.data();
                  const className = classData.name || classCode;
                  
                  await db.collection("notifications").add({
                    userId: studentId,
                    title: "Marked as Late",
                    message: `You have been marked as LATE in ${className} for ${sessionDay}. Please remember to submit attendance on time.`,
                    type: "warning", // Warning instead of error for late
                    read: false,
                    timestamp: admin.firestore.Timestamp.now(),
                    relatedDoc: {
                      type: "attendance",
                      id: attendanceRecord.id
                    },
                    extraData: {
                      classCode,
                      className,
                      date: new Date().toLocaleDateString()
                    }
                  });
                  console.log(`[API autoMarkAbsents] Created late notification for studentId=${studentId}, classCode=${classCode}`);
                } catch (notifError) {
                  console.error(`[API autoMarkAbsents] Error creating late notification for studentId=${studentId}:`, notifError);
                }
              }
            } else {
              console.log(`[API autoMarkAbsents] Attendance found for studentId=${studentId}, classCode=${classCode} for session on ${sessionDay} ending ${sessionEndTime}`);
            }
          }
        } else {
          let skipReason = '';
          if (now <= gracePeriodEnd) skipReason = 'still within 15-minute grace period';
          else if (now <= sessionEnd) skipReason = 'time to mark as late has not come yet';
          else if (timeDiffFromEnd >= thirtyMinutesInMillis) skipReason = 'session ended more than 30 minutes ago';
          else if (timeDiffFromEnd < 0) skipReason = 'session end time is in the future relative to current time (clock sync issue?)';
          else skipReason = 'condition not met for an unknown reason';
          console.log(`[API autoMarkAbsents] Skipping class ${classCode} session ${sessionDay} ${sessionEndTime}. Reason: ${skipReason}.`);
        }
      }
    }
    
    console.log(`[API autoMarkAbsents] Finished. Checked ${checkedSessionsCount} sessions. Marked ${markedAbsentCount} students absent and ${markedLateCount} students late.`);
    return NextResponse.json({ 
      success: true, 
      checkedSessions: checkedSessionsCount, 
      markedAbsentCount,
      markedLateCount 
    });
  } catch (error) {
    console.error("[API autoMarkAbsents] Error in autoMarkAbsents API route:", error);
    // It's good practice to check the type of error if possible
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    return NextResponse.json({ error: 'Internal Server Error', details: errorMessage }, { status: 500 });
  }
}
